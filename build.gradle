buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.4.0'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'com.treasuredata'
version = '1.0.0'
description = 'Android SDK for Treasure Data Cloud'

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
    google()
}

dependencies {
    implementation 'org.komamitsu:android-logger-bridge:0.0.2'
    implementation 'com.fasterxml.jackson.jr:jackson-jr-objects:2.17.0'
    implementation 'com.treasuredata:keen-client-java-core:3.0.0'

    compileOnly 'com.google.android:android:4.1.1.4'

//    testImplementation 'com.google.android.gms:play-services-ads:23.0.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.6.0'
    testImplementation 'com.google.android:android:4.1.1.4'
}

task fatJar(type: Jar) {
//    dependsOn configurations.runtime
    dependsOn configurations.runtimeClasspath
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    // The name "shaded" here is just to be consistent with old packaged
    // when we were still maven-shade-plugin to make the fat JAR, no classes are actually get shaded or shadowed.
    // We could this into "-all" classifier, which is less misleading
    archiveClassifier = 'shaded'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

task javadocSite(type: Javadoc) {
    failOnError true
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output // This is to compile excluded internal files as well
    include 'com/treasuredata/android/**'
    exclude 'com/treasuredata/android/billing/internal/**'
    options.noTimestamp true
    destinationDir = file("${rootDir}/docs")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact fatJar
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Android SDK for Treasure Data Cloud'
                description = 'Android SDK for Treasure Data Cloud'
                url = 'https://github.com/treasure-data/td-android-sdk'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'komamitsu'
                        name = 'Mitsunori Komatsu'
                        email = 'komamitsu@gmail.com'
                    }
                    developer {
                        id = 'mcaramello'
                        name = 'Michele Caramello'
                        email = 'michele.caramello@gmail.com'
                    }
                    developer {
                        id = 'huylenq'
                        name = 'Huy Le'
                        email = 'huy.lenq@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/treasure-data/td-android-sdk.git'
                    developerConnection = 'scm:git:git@github.com:treasure-data/td-android-sdk.git'
                    url = 'https://github.com/treasure-data/td-android-sdk'
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/treasure-data/td-android-sdk/issues'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username findProperty('sonatypeUsername')
                password findProperty('sonatypePassword')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
